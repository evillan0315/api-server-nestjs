generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ModelParameters {
  id              String   @id @default(uuid())
  messageId       String
  temperature     Float?
  topP            Float?
  topK            Int?
  maxOutputTokens Int?
  safetySettings  Json?
  stopSequences   Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Message         Message  @relation(fields: [messageId], references: [id])
}

model ApiUsage {
  id           String   @id @default(uuid())
  messageId    String
  inputTokens  Int?
  outputTokens Int?
  cost         Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Message      Message  @relation(fields: [messageId], references: [id])
}

model Chat {
  id        String    @id @default(uuid())
  userId    String
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User      @relation(fields: [userId], references: [id])
  Message   Message[]
}

model Message {
  id              String            @id @default(uuid())
  chatId          String
  content         String
  sender          Sender
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ApiUsage        ApiUsage[]
  Chat            Chat              @relation(fields: [chatId], references: [id])
  ModelParameters ModelParameters[]
}

model Color {
  id        String     @id @default(uuid())
  slug      String     @unique
  name      String
  color     String?
  createdAt DateTime   @default(now())
  Priority  Priority[]
  Status    Status[]
}

model Comment {
  id        String   @id @default(uuid())
  name      String?
  text      String
  createdAt DateTime @default(now())
}

model Component {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  props       Json?
}

model Documentation {
  id      String  @id @default(uuid())
  name    String
  content String?
}

model File {
  id        String   @id @default(uuid())
  name      String   @unique
  content   String
  json      Json?
  type      String
  createdAt DateTime @default(now())
}

model Item {
  id          String    @id @default(uuid())
  name        String
  description String?
  startDate   DateTime?
  dueDate     DateTime?
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
}

model Page {
  id      String  @id @default(uuid())
  title   String?
  content String?
  props   Json?
}

model Post {
  id      String  @id @default(uuid())
  name    String?
  content String?
  props   Json?
}

model Priority {
  id        String   @id @default(uuid())
  slug      String   @unique
  name      String
  colorId   String
  createdAt DateTime @default(now())
  Color     Color    @relation(fields: [colorId], references: [id])
  Task      Task[]
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  Status      Status[]
  Task        Task[]
}

model Role {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Status {
  id        String   @id @default(uuid())
  slug      String   @unique
  name      String
  colorId   String
  createdAt DateTime @default(now())
  projectId String?
  Color     Color    @relation(fields: [colorId], references: [id])
  Project   Project? @relation(fields: [projectId], references: [id])
  Task      Task[]
}

model Swingers {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  swingerID String   @unique
  jsonData  Json
  createdAt DateTime @default(now())
}

model Tag {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
}

model Task {
  id          String    @id @default(uuid())
  name        String
  description String?
  startDate   DateTime?
  dueDate     DateTime?
  statusId    String
  priorityId  String?
  userId      String?
  projectId   String?
  Priority    Priority? @relation(fields: [priorityId], references: [id])
  Project     Project?  @relation(fields: [projectId], references: [id])
  Status      Status    @relation(fields: [statusId], references: [id])
  User        User?     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  phone_number  String?
  address       String?
  gender        String?
  username      String?   @unique
  createdAt     DateTime  @default(now())
  cognitoId     String?   @unique
  updatedAt     DateTime? @updatedAt
  Account       Account[]
  Chat          Chat[]
  Session       Session[]
  Task          Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Sender {
  USER
  AI
}
